#summary Describe a framework for developing freestanding web pages for OLAC.

= Introduction =

Many OLAC pages are vulnerable to database server outage because they are dynamically generated from data that is dynamically read from the server. They also require more advanced web server configuration, e.g. PHP, CGI, WSGI, MySQL, etc.

OLAC data is not completely static, but it is close to static. The data is updated at most once a day. Thus, by going dynamic, we gain little while suffering from the issues.

In order to avoid the issues, the data needed for web pages is queried offline and stored as files on disk. Then a thin layer of web data API is defined on top of the data files. Finally, the freestanding web pages access the static data using the API via XMLHttpRequest.

(How is this better than generating static HTML directly off the database?)

= Data flow =

The following diagram shows how the data stored in the database server flows to the client.

{{{
              OLAC DB
                 |
                 | DataScripts
                 |
         Static data files
                 |
                 |
                 |
              PyWebAPI
               |    |
               |    |
          ,----'    `-----------.
          |                     |
          |                     | JsonScripts
          |                     |
         srv            Static JSON files
}}}

 * OLAC DB
 * Static data files
 * Statis JSON files

 * DataScripts
 * PyWebAPI
 * JsonScripts