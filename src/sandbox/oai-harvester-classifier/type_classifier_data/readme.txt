This directory contains scripts and raw data used as training data for a resource type binary classifier.  The idea was to use LOC data provided by the scriblio dataset, and to use the LC Callnumber to label a record YES or NO as a language resource.  The callnumber logic is contained in the prep_type_xml.py file.  The source XML files were prepared by Gary using MARCEdit and a custom XSLT to create a limited RDF XML record for each MARC record.  These XML files were located in /home/simonsg/Documents/Abbreviated_DC/.  The prep_type_xml.py python script takes these files as input and outputs a tab delimited "ready for classifier training" file with YES/NO labels and the appropriate text content, one record per line.

Because the LCC rules were not quite good enough, we still ended up with a fair amount of resources labeled YES that were not in fact language resources.  We decided to filter these records out using a few simple grep filters.  The first step was to grep for YES lines that contained the word "language" or the word "dialect".  Non-matching lines were thrown out.  Then I ran the resulting set of lines through a series of inverse filters: throwing out lines that matched the grep expression (keywords we determined were unique to non-language resources).  That filter logic is contained in grepfilters.sh.

At the end of this process, I ended up with two important files: filtered.txt and no.txt.  filtered.txt contained all of the YES lines that made it through the series of filters explained above, and the no.txt contained all of the NO lines, negative training data.  Unfortunately, the text content of these lines contained a number of unfriendly characters, to the point where the MALLET Java package was running out of memory with more than 20,000 lines.  I wrote a "cleanup.sh" script which attempts to remove non-printable ascii characters.  This allowed me to feed MALLET up to 1.5 million lines of training data.  I still had to use "reducelines.py" to remove every nth line, but if we had more memory in this machine, I imagine we could train a binary classifier with the entire LOC data prepared in this way.
