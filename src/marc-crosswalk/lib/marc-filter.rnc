#
# Abstract syntax for expressing filters in the MARC-to-OLAC crosswalk
#
#    Gary Simons (SIL International), 17 Jan 2009
#    Last updated: 18 Mar 2011
#
# Defines a filter for extracting a subset of  records from a
# collection of MARC records. The reject-rules remove any
# records that match the criteria given in one of those rules.
# From those that remain, the retain-rules then pass on any 
# records that march the criteria given in one of those rules.
# All unmatched records are rejected.

namespace dc = "http://purl.org/dc/elements/1.1/"
namespace rng = "http://relaxng.org/ns/structure/1.0"
datatypes xsd = "http://www.w3.org/2001/XMLSchema-datatypes"

start =
   element marc-filter {
      header, reject-rules, retain-rules }
   
# The header gives the metadata for the filter definition itself
header = element header { dc-title, dc-contributor, dc-date, dc-description }
dc-title = element dc:title { text }
dc-contributor = element dc:contributor { text }
dc-date = element dc:date { text }
dc-description = element dc:description { text }

# Any record that matches a test in the set of reject-rules is summarily
# rejected, regardless of whether it matches one of the retain-rules
reject-rules = 
   element reject-rules { test* }
   
# After surviving the reject rules, any record that matches a test
# in the retain-rules passes through the filter to the output;
# otherwise, the record is rejected. 
retain-rules = 
   element retain-rules { retain-all | test+ }

# Retain-all: every surviving record is retained
retain-all = 
   element retain-all { empty }

# A test is the AND of a set of criteria
test = element test { criterion+ }
# The set of criterion tests used in both stages of the filter
criterion = leader | control-field | data-field

# A test on a positional subfield within the record leader
leader =
   element leader {
      (attribute position { xsd:unsignedByte },
       attribute length { xsd:unsignedByte },
       attribute test { "exists" | "equals" },
       text-element*)
      # For an exists test, there are no text elements 
      # For an equals test, it is an OR over all supplied text values
   }
   
# A test on a positional subfield within a named control field
control-field =
   element control-field {
      attribute tag {
         xsd:string { pattern = "[0-9][0-9][0-9]" }
      },
      attribute position { xsd:unsignedByte }?, # obligatory for 008; otherwise, obligatorily absent
      attribute length { xsd:unsignedByte }?, # ditto
           # N.B. use position numbers as counted by MARC (beginning with position 0)
      attribute test { "exists" | "equals"  | "contains" | "starts-with" }, # only the first two with 008
      text-element*
   }
   
# A test on a named subfield within a named data field
data-field =
   element data-field {
      # x is a wildcard; only xxx, dxx, ddx are allowed
      attribute tag {
         xsd:string { pattern = "[0-9x][0-9x][0-9x]" }
      },
      # if @code is empty, all subfields are searched. If @code is not
      # emptyr, it is a list of the subfields to search in
      attribute code {
         xsd:string { pattern = "[a-z0-9]*" }
      },
      attribute test { "exists" | "equals" | "contains" | "starts-with" },
      text-element*
   }
text-element = element text { text }


